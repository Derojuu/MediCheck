generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL")
}

model User {
  id          String   @id @default(cuid())
  userRole    UserRole
  clerkUserId String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  consumer      Consumer?
  organizations Organization?
  teamMember    TeamMember?

  @@map("users")
}

model Consumer {
  id          String    @id @default(cuid())
  userId      String    @unique
  fullName    String
  dateOfBirth DateTime?
  phoneNumber String?
  address     String?
  country     String? 
  state       String? 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  //
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  counterfeit_reports CounterfeitReport[]
  scanHistory         ScanHistory[] 

  @@map("consumers")
}

model Organization {
  id                String           @id @default(cuid())
  adminId           String           @unique
  organizationType  OrganizationType
  companyName       String
  contactEmail      String
  contactPhone      String?
  contactPersonName String?
  address           String
  country           String
  managedRegistry   String
  state             String?
  rcNumber          String?
  nafdacNumber      String?
  businessRegNumber String?
  licenseNumber     String?
  pcnNumber         String?
  agencyName        String?
  officialId        String?
  distributorType   String?

  isVerified        Boolean          @default(true)
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  initiatedConnections AgentConnection[] @relation("InitiatorOrg")
  receivedConnections  AgentConnection[] @relation("ReceiverOrg")
  medicationBatches MedicationBatch[]
  organizationAgent Agent? @relation("OrgAgent")
  users             User                @relation(fields: [adminId], references: [id], onDelete: Cascade)
  transfersFrom     OwnershipTransfer[] @relation("TransferFrom")
  transfersTo       OwnershipTransfer[] @relation("TransferTo")
  teamMembers       TeamMember[]
  products          Product[]

  @@map("organizations")
}

model Product {
  id                String    @id @default(cuid())
  organizationId    String
  name              String
  description       String
  category          String
  dosageForm        String?
  strength          String?
  activeIngredients String[]
  nafdacNumber      String?
  shelfLifeMonths   Int?
  storageConditions String?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("products")
}

model TeamMember {
  id             String   @id @default(cuid())
  userId         String   @unique
  organizationId String
  isAdmin        Boolean
  name           String
  email          String
  role           String
  department     String
  joinDate       DateTime @default(now())
  lastActive     DateTime @default(now())
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  scanHistory         ScanHistory[]

  @@map("team_members")
}

model MedicationBatch {
  id                  String              @id @default(cuid())
  batchId             String              @unique
  organizationId      String
  drugName            String
  composition         String?
  batchSize           Int
  manufacturingDate   DateTime
  expiryDate          DateTime
  storageInstructions String?
  currentLocation     String?
  status              BatchStatus         @default(CREATED)
  qrCodeData          String?
  qrSignature         String?
  secretKey           String?
  blockchainHash      String?
  // ‚úÖ Hedera registry for this batch
  registryTopicId     String? // HCS topic ID where all units are registered
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  counterfeitReports  CounterfeitReport[]
  organization        Organization        @relation(fields: [organizationId], references: [id])
  ownershipTransfers  OwnershipTransfer[]
  scanHistory         ScanHistory[]
  batchEvents         BatchEvent[]
  medicationUnits     MedicationUnit[]

  @@map("medication_batches")
}

model MedicationUnit {
  id               String     @id @default(cuid()) // Primary key
  batchId          String // FK to MedicationBatch
  serialNumber     String     @unique // Unique identifier per unit
  qrCode           String? // Optional QR code for scanning
  qrSignature      String?
  currentLocation  String? // Where the unit currently is
  status           UnitStatus @default(IN_STOCK) // Enum for tracking unit state
  blockchainHash   String? // Optional for blockchain verification
  createdAt        DateTime   @default(now()) // Auto set on creation
  // ‚úÖ On-chain footprint for this specific unit
  registrySequence Int? // sequence number of the unit‚Äôs registration on-chain
  updatedAt        DateTime   @updatedAt // Auto updated on changes
  //
  soldAt           DateTime? 

  // Relation back to MedicationBatch
  batch MedicationBatch @relation(fields: [batchId], references: [id])
  scanHistory      ScanHistory[]

  @@map("medication_units")
}

model BatchEvent {
  id        String   @id @default(cuid())
  batchId   String
  eventType String
  hederaSeq Int
  payload   Json
  region    String
  createdAt DateTime @default(now())

  medicationBatch MedicationBatch @relation(fields: [batchId], references: [id])
}

model OwnershipTransfer {
  id             String          @id @default(cuid())
  batchId        String
  fromOrgId      String
  toOrgId        String
  transferDate   DateTime        @default(now())
  status         TransferStatus  @default(PENDING)
  blockchainHash String?
  notes          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  batch          MedicationBatch @relation(fields: [batchId], references: [id])
  fromOrg        Organization    @relation("TransferFrom", fields: [fromOrgId], references: [id])
  toOrg          Organization    @relation("TransferTo", fields: [toOrgId], references: [id])

  @@map("ownership_transfers")
}

model ScanHistory {
  id           String          @id @default(cuid())
  //
  batchId      String?
  teamMemberId String?
  //
  unitId       String?
  consumerId   String?
  //
  isAnonymous  Boolean
  //
  hcs10Seq      Int? 
  //
  region       String?
  scanDate     DateTime        @default(now())
  scanResult   ScanResult
  latitude     Float?
  longitude    Float?
  timestamp    DateTime        @default(now())

  batch        MedicationBatch? @relation(fields: [batchId], references: [id], onDelete: Cascade)
  teamMember   TeamMember?      @relation(fields: [teamMemberId], references: [id], onDelete: SetNull)
  medicationUnit MedicationUnit? @relation(fields: [unitId], references: [id], onDelete: SetNull)
  consumer     Consumer?         @relation(fields: [consumerId], references: [id], onDelete: SetNull)

  // Reverse relation
  predictionScores PredictionScore[]
  

  @@map("scan_history")
}

model PredictionScore {
  id                    String     @id @default(cuid())
  scanHistoryId         String
  predictedLabel        Boolean
  predictedProbability  Float
  predictedAt           DateTime   @default(now())
  region                String?    
  scanType              ScanType?

  // Relation back to ScanHistory
  scanHistory           ScanHistory @relation(fields: [scanHistoryId], references: [id], onDelete: Cascade)

  @@map("prediction_scores")
}

model CounterfeitReport {
  id             String           @id @default(cuid())
  batchId        String?
  reporterId     String
  reportType     ReportType
  severity       SeverityLevel
  description    String
  location       String?
  evidence       String[]
  status         ReportStatus     @default(PENDING)
  investigatorId String?
  resolution     String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  batch          MedicationBatch? @relation(fields: [batchId], references: [id])
  consumers      Consumer         @relation(fields: [reporterId], references: [id])

  @@map("counterfeit_reports")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_config")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  entityType String
  entityId   String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())

  @@map("audit_logs")
}


model Agent {
  id             Int      @id @default(autoincrement())
  agentName      String
  accountId      String?  
  role           String     // "manufacturer" | "distributor" | "pharmacy" | "hospital" | "regulator" | "gateway"
  inboundTopic   String
  outboundTopic  String
  connectionTopic String?   // optional
  managedRegistry String?   // HCS-2 topicId this agent manages (if manufacturer)
  profileId      String?    // hcs-11 ref
  publicKey      String     // agent signing pubkey
  privateKey     String?
  createdAt      DateTime   @default(now())

  messages AgentMessage[]
  
  // üîÅ Reverse relations to AgentConnection
  initiatedConnections AgentConnection[] @relation("InitiatorAgent")
  receivedConnections  AgentConnection[] @relation("ReceiverAgent")

  orgId        String       @unique
  organization Organization @relation("OrgAgent", fields: [orgId], references: [id])
}


model AgentMessage {
  id          Int      @id @default(autoincrement())
  topicId     String
  message     Json
  sequence    Int?
  createdAt   DateTime @default(now())

  agentId     Int
  Agent       Agent    @relation(fields: [agentId], references: [id])
}

model AgentConnection {
  id                 String   @id @default(cuid())
  initiatorOrgId     String
  receiverOrgId      String
  initiatorAgentId   Int
  receiverAgentId    Int
  connectionTopicId  String   // shared HCS-10 topic for both
  status             String   @default("PENDING") // PENDING | ACTIVE | CLOSED
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  initiatorOrg       Organization @relation("InitiatorOrg", fields: [initiatorOrgId], references: [id])
  receiverOrg        Organization @relation("ReceiverOrg", fields: [receiverOrgId], references: [id])

  initiatorAgent     Agent @relation("InitiatorAgent", fields: [initiatorAgentId], references: [id])
  receiverAgent      Agent @relation("ReceiverAgent", fields: [receiverAgentId], references: [id])
}

model registration_requests {
  id          String   @id @default(uuid())
  agent_id    String
  org_id      String
  network     String   // required by the SDK
  status      String?
  created_at  DateTime @default(now())
}



enum UserRole {
  ORGANIZATION_MEMBER
  CONSUMER
  SUPER_ADMIN
}

enum OrganizationType {
  MANUFACTURER
  DRUG_DISTRIBUTOR
  HOSPITAL
  PHARMACY
  REGULATOR
}

enum BatchStatus {
  CREATED
  IN_TRANSIT
  DELIVERED
  FLAGGED
  RECALLED
  EXPIRED
  BULLY
}

enum UnitStatus {
  IN_STOCK
  DISPATCHED
  SOLD
  RETURNED
  LOST
}

enum TransferStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum ScanResult {
  GENUINE
  SUSPICIOUS
}

enum ReportType {
  COUNTERFEIT_DETECTED
  PACKAGING_ISSUE
  EXPIRY_MISMATCH
  MULTIPLE_SCANS
  SUSPICIOUS_ACTIVITY
}

enum SeverityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReportStatus {
  PENDING
  INVESTIGATING
  RESOLVED
  DISMISSED
  ESCALATED
}

enum ScanType{
  UNIT
  BATCH
}

enum ScannedBy {
  CONSUMER
  ORGANIZATION_MEMBER
  ANONYMOUS_USER
}
